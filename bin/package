#!/usr/bin/env python3

from typing import TypedDict, NotRequired, Optional
from dataclasses import dataclass, field

import json
import re
import yaml


@dataclass(eq=True, frozen=True, kw_only=True)
class Source:
    id:          Optional[str] = field(default=None)
    name:        str
    traits:      list[str]     = field(default_factory=lambda: ["3rd Party"])
    lore:        Optional[str] = field(default=None)
    description: str
    src:         str           = field(default="Custom")

    @property
    def normalized_description(self) -> str:
        """
        Replaces sequences of two or more line breaks with HTML line breaks
        and reduces all other whitespace to a single space.
        """
        return re.sub(r"\s+", " ", re.sub(r"\n{2,}", "<br>", self.description))


Background = TypedDict("Background", {
    "databaseID":  int,
    "id":          str,
    "name":        str,
    "traits":      str,
    "boost_ref_1": str,
    "boost_ref_2": str,
    "freeFeatID":  str,
    "skill":       str,
    "lore":        str,
    "description": str,
    "src":         str })

@dataclass(kw_only=True)
class BG:
    databaseID:  int
    id:          str
    name:        str
    traits:      str
    boost_ref_1: str
    boost_ref_2: str
    freeFeatID:  str
    skill:       str
    lore:        str
    description: str
    src:         str

BackgroundPack = TypedDict("BackgroundPack", {
    "customPackID":          str,
    "customPackName":        str,
    "listCustomBackgrounds": list[Background] })

@dataclass
class BGPack:
    customPackID:          str
    customPackName:        str
    listCustomBackgrounds: list[BG]


def load_sources(filepath: str) -> list[Source]:
    """Loads source backgrounds from the given YAML file."""
    with open(filepath, "r", encoding="utf-8") as file:
        sources = [Source(**attrs) for attrs in yaml.safe_load(file)]
    return sources


def load_pack(filepath: str) -> BackgroundPack:
    """Loads a backgrounds pack from the given JSON file."""
    with open(filepath, "r", encoding="utf-8") as file:
        pack = json.load(file)
    return pack


def find_matching_source(target:  Background,
                         sources: list[Source]) -> Source|None:
    """
    Looks for a source background that matches the target background.
    If no match is found, it returns None. Backgrounds are considered
    matching if they have the same name or ID.
    """
    for source in sources:
        if source.name == target["name"]:
            return source
        if source.id == target["id"]:
            return source

    return None


def update_background(target: Background, source: Source|None) -> Background:
    """
    Returns a copy of the target background that incorporates changes
    from the source background.
    """
    if source is None:
        return target

    target = target.copy()
    target["id"] = source.id or target["id"]
    target["lore"] = source.lore or target["lore"]
    target["name"] = source.name
    target["traits"] = ", ".join(source.traits)
    target["description"] = source.normalized_description
    target["src"] = source.src
    return target


def update_background_from_sources(target:  Background,
                                   sources: list[Source]) -> Background:
    """
    Searches for a source background that matches the target background
    and returns the updated target.
    """
    return update_background(target, find_matching_source(target, sources))


def update_backgrounds(sources: list[Source],
                       pack:    list[Background] ) -> list[Background]:
    """
    Updates the backgrounds in the pack with information from the
    source backgrounds.
    """
    return [
        update_background_from_sources(background, sources)
        for background in pack
    ]


def main():
    sources = load_sources("backgrounds.yml")
    pack = load_pack("sandpoint-backgrounds.json")
    pack["listCustomBackgrounds"] = update_backgrounds(
        sources,
        pack["listCustomBackgrounds"]
    )
    print(json.dumps(pack, indent=2))


if __name__ == "__main__":
    main()
