#!/usr/bin/env python3

from typing import Optional
from dataclasses import dataclass, field, asdict

import json
import re
import yaml


@dataclass(eq=True, frozen=True, kw_only=True)
class Source:
    id:          Optional[str] = field(default=None)
    name:        str
    traits:      list[str]     = field(default_factory=lambda: ["3rd Party"])
    lore:        Optional[str] = field(default=None)
    description: str
    src:         str           = field(default="Custom")


    @property
    def normalized_description(self) -> str:
        """
        Replaces sequences of two or more line breaks with HTML line breaks
        and reduces all other whitespace to a single space.
        """
        return re.sub(r"\s+", " ", re.sub(r"\n{2,}", "<br>", self.description))


    @staticmethod
    def load(filepath: str) -> list["Source"]:
        """Loads source backgrounds from the given YAML file."""
        with open(filepath, "r", encoding="utf-8") as file:
            sources = [Source(**attrs) for attrs in yaml.safe_load(file)]
        return sources


@dataclass(kw_only=True)
class Background:
    databaseID:  int
    id:          str
    name:        str
    traits:      str
    boost_ref_1: str
    boost_ref_2: str
    freeFeatID:  str
    skill:       str
    lore:        str
    description: str
    src:         str


    def find_matching_source(self, sources: list[Source]) -> Source|None:
        """
        Looks for a matching source background in the given list. If no
        match is found, it returns None. A source is considered if it
        has the same name or ID.
        """

        for source in sources:
            if source.name == self.name:
                return source
            if source.id == self.id:
                return source

        return None


    def update_from_sources(self, sources: list[Source]):
        """
        Updates the backgfound from the first matching source in the
        given list. If no match is found, the background is left
        unchanged.
        """

        source = self.find_matching_source(sources)
        if source is None:
            return

        self.id = source.id or self.id
        self.lore = source.lore or self.lore
        self.name = source.name
        self.traits = ", ".join(source.traits)
        self.description = source.normalized_description
        self.src = source.src


@dataclass(kw_only=True)
class BackgroundPack:
    customPackID:          str
    customPackName:        str
    listCustomBackgrounds: list[Background]


    @staticmethod
    def load(filepath: str) -> "BackgroundPack":
        """Loads a backgrounds pack from the given JSON file."""
        with open(filepath, "r", encoding="utf-8") as file:
            pack = json.load(file)
            pack["listCustomBackgrounds"] = [
                Background(**background)
                for background in pack["listCustomBackgrounds"]
            ]
        return BackgroundPack(**pack)


    def update_from_sources(self, sources: list[Source]):
        """Updates all backgrounds in the pack from the given sources."""
        for background in self.listCustomBackgrounds:
            background.update_from_sources(sources)


def main():
    sources = Source.load("backgrounds.yml")
    pack = BackgroundPack.load("sandpoint-backgrounds.json")
    pack.update_from_sources(sources)
    print(json.dumps(asdict(pack), indent=2))


if __name__ == "__main__":
    main()
